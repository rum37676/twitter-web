{"version":3,"sources":["src/app.js","src/environment.js","src/home.js","src/main.js","src/nav-bar.js","src/resources/index.js","src/services/async-http-client.js","src/services/fixtures.js","src/services/messages.js","src/services/twitter-service.js","src/viewmodels/adminSettings/adminSettings.js","src/viewmodels/dashboard/dashboard.js","src/viewmodels/followerTimeline/followerTimeline.js","src/viewmodels/globalTimeline/globalTimeline.js","src/viewmodels/login/login.js","src/viewmodels/logout/logout.js","src/viewmodels/profil/profil.js","src/viewmodels/signup/signup.js","src/viewmodels/startScreen/startScreen.js","src/viewmodels/timeline/timeline.js","src/viewmodels/tweet/blob-to-url.js","src/viewmodels/tweet/file-list-to-array.js","src/viewmodels/tweet/tweet.js","src/viewmodels/usercard/usercard.js","src/viewmodels/users/users.js","src/viewmodels/userTimeline/userTimeline.js"],"names":["App","ts","au","ea","twitterService","subscribe","router","navigate","replace","trigger","reset","msg","status","success","setRoot","configureRouter","config","map","route","name","moduleId","nav","title","attached","console","log","isAuthenticated","Promise","all","getMe","then","navigateToRoute","catch","error","debug","testing","Home","aurelia","role","mapUnknownRoutes","updateData","configure","use","standardConfiguration","feature","developmentLogging","plugin","start","NavBar","showNav","navItem","ownUser","toLowerCase","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrlOnline","authenticated","localStorage","sessionTokenTwitter","auth","JSON","parse","withHeader","token","authenticate","url","user","post","response","content","stringify","configuration","email","publish","message","clearAuthentication","get","obj","delete","Fixtures","baseUrlLocal","users","username","password","tweets","text","tweeter","TotalUpdate","total","LoginStatus","TweetUpdate","UserUpdate","OwnUserUpdate","TwitterService","FormData","data","ac","cT","compositionTransaction","compositionTransactionNotifier","enlist","res","done","saveTweet","tweetText","tweetImage","formData","append","getTweets","deleteTweet","tweet","_id","deleteAllTweetsForUser","follow","bool","getUsers","deleteUser","deleteTweetsForUser","updateProfil","uploadProfilImage","profilIimage","undefined","register","newUser","login","logout","AdminSettings","adminView","errorText","addUser","Dashboard","FollowerTimeline","updateUsers","push","followers","follower","GlobalTimeline","Login","rememberMe","emailTwitter","loginOptions","trim","Logout","Profil","profilImage","updateUser","update","deleteAllTweets","Signup","e","StartScreen","Timeline","updateTweets","allowDelete","activate","BlobToUrlValueConverter","toView","blob","URL","createObjectURL","FileListToArrayValueConverter","fileList","files","i","length","item","Tweet","imageList","selectedFiles","createTweet","addPicturesToArray","Usercard","userId","alreadyFollowing","hasProfilImage","Users","otherUsers","UserTimeline","params","id"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\nimport TwitterService from './services/twitter-service';\n\n@inject(TwitterService, Aurelia, EventAggregator)\nexport class App {\n\n  constructor(ts, au, ea) {\n    this.au = au;\n    this.twitterService = ts;\n    ea.subscribe(LoginStatus, msg => {\n      this.router.navigate('/', { replace: true, trigger: false });\n      this.router.reset();\n      if (msg.status.success === true) {\n        au.setRoot('home');\n      } else {\n        au.setRoot('app');\n      }\n    });\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'login'], name: 'login', moduleId: 'viewmodels/login/login', nav: true, title: 'Login' },\n      { route: 'signup', name: 'signup', moduleId: 'viewmodels/signup/signup', nav: true, title: 'Signup' }\n    ]);\n    this.router = router;\n  }\n\n  attached() {\n    console.log('app attached');\n    if (this.twitterService.isAuthenticated()) {\n      Promise.all([\n        this.twitterService.getMe()\n      ]).then(res => {\n        this.au.setRoot('home').then(() => {\n          this.router.navigateToRoute('startScreen');\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { inject, Aurelia } from 'aurelia-framework';\nimport TwitterService from 'services/twitter-service';\n\n@inject(Aurelia, TwitterService)\nexport class Home {\n\n  constructor(au, ts) {\n    this.aurelia = au;\n    this.twitterService = ts;\n  }\n\n  configureRouter(config, router) {\n\n    config.map([\n      { route: 'startScreen', name: 'startScreen', moduleId: 'viewmodels/startScreen/startScreen', nav: true, title: 'Start Screen' },\n      { route: 'followerTimeline', name: 'followerTimeline', moduleId: 'viewmodels/followerTimeline/followerTimeline', nav: true, title: 'Follower Timeline' },\n      { route: ['', 'home'], name: 'globalTimeline', moduleId: 'viewmodels/globalTimeline/globalTimeline', nav: true, title: 'Global Timeline' },\n      { route: 'users', name: 'users', moduleId: 'viewmodels/users/users', nav: true, title: 'Users' },\n      //{ route: 'dashboard', name: 'dashboard', moduleId: 'viewmodels/dashboard/dashboard', nav: true, title: 'Dashboard' },\n      { route: 'profil', name: 'profil', moduleId: 'viewmodels/profil/profil', nav: true, title: 'Profil' },\n      { route: 'adminSettings', name: 'adminSettings', moduleId: 'viewmodels/adminSettings/adminSettings', nav: true, title: 'Admin Settings', role: 'admin' },\n      { route: 'userTimeline/:id', name: 'userTimeline', moduleId: 'viewmodels/userTimeline/userTimeline', nav: false, title: 'userTimeline' },\n      { route: 'logout', name: 'logout', moduleId: 'viewmodels/logout/logout', nav: true, title: 'Logout' }\n    ]);\n    this.router = router;\n\n    config.mapUnknownRoutes(instruction => {\n      return 'home';\n    });\n  }\n\n  attached() {\n    console.log('home attached');\n    if (this.twitterService.isAuthenticated()) {\n      this.twitterService.updateData();\n    }\n  }\n}\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject, bindable} from 'aurelia-framework';\nimport TwitterService from './services/twitter-service';\n\n@inject(TwitterService)\nexport class NavBar {\n\n  @bindable router;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  showNav(navItem) {\n    if (!navItem.config.role) {\n      return true;\n    }\n    if (this.twitterService.ownUser !== null) {\n      console.log('role: ' + this.twitterService.ownUser.role);\n      if (typeof this.twitterService.ownUser.role !== \"undefined\") {\n        return navItem.config.role === this.twitterService.ownUser.role.toLowerCase();\n      }\n    }\n    else {\n      // ownUser not updated yet\n      console.log('ownUser data not initialized');\n      return false;\n    }\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus, OwnUserUpdate} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator )\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea) {\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrlOnline);\n    });\n    this.ea = ea;\n  }\n\n  isAuthenticated() {\n    let authenticated = false;\n    if (localStorage.sessionTokenTwitter !== 'null' && typeof localStorage.sessionTokenTwitter !== 'undefined') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(localStorage.sessionTokenTwitter);\n        http.withHeader('Authorization', 'bearer ' + auth.token);\n      });\n    }\n    return authenticated;\n  }\n\n  authenticate(url, user) {\n    //console.log('authentication');\n    this.http.post(url, user).then(response => {\n      const status = response.content;\n      if (status.success) {\n        localStorage.sessionTokenTwitter = JSON.stringify(response.content);\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n        console.log('authentication successful: logged in user: ' + user.email);\n        this.ea.publish(new OwnUserUpdate(status.user));\n      } else {\n        console.log('authentication failed: could not log in user: ' + user.email);\n      }\n      this.ea.publish(new LoginStatus(status));\n    }).catch(error => {\n      const status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.ea.publish(new LoginStatus(status));\n    });\n  }\n\n  clearAuthentication() {\n    localStorage.sessionTokenTwitter = null;\n    this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n\n  get(url) {\n    return this.http.get(url);\n  }\n\n  post(url, obj) {\n    return this.http.post(url, obj);\n  }\n\n  delete(url) {\n    console.log('http-client delete');\n    return this.http.delete(url);\n  }\n}\n","export default class Fixtures {\n\n  baseUrlLocal = 'http://localhost:4000';\n  baseUrlOnline = 'https://safe-brushlands-98673.herokuapp.com';\n  users = [\n    {\n      username: 'user1',\n      name: 'user eins',\n      email: 'user1@1.com',\n      password: 'secret1'\n    },\n    {\n      username: 'user2',\n      name: 'user zwei',\n      email: 'user2@2.com',\n      password: 'secret2'\n    }\n  ];\n\n  tweets = [\n    {\n      text: 'Test tweet 1',\n      tweeter: this.users[0]\n    },\n    {\n      text: 'Test tweet 2',\n      tweeter: this.users[1]\n    }\n  ];\n}\n","export class TotalUpdate {\n  constructor(total) {\n    this.total = total;\n  }\n}\n\nexport class LoginStatus {\n  constructor(status) {\n    this.status = status;\n  }\n}\n\nexport class TweetUpdate {\n}\n\nexport class UserUpdate {\n}\n\nexport class OwnUserUpdate {\n  constructor(user) {\n    this.user = user;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport Fixtures from './fixtures';\nimport {LoginStatus, OwnUserUpdate, TweetUpdate, UserUpdate} from './messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\nimport { CompositionTransaction } from 'aurelia-framework';\n\n@inject(Fixtures, EventAggregator, AsyncHttpClient, CompositionTransaction, FormData)\nexport default class TwitterService {\n\n  ownUser = null;\n  users = [];\n  tweets = [];\n\n\n  constructor(data, ea, ac, cT) {\n    this.ea = ea;\n    this.ac = ac;\n    this.compositionTransaction = cT;\n    this.compositionTransactionNotifier = null;\n\n    this.ea.subscribe(OwnUserUpdate, msg => {\n      this.ownUser = msg.user;\n    });\n    this.ea.subscribe(LoginStatus, msg => {\n      if (msg.status.success === true) {\n        console.log('twitterService subscribe');\n        this.updateData();\n      }\n    });\n  }\n\n  updateData() {\n    this.compositionTransactionNotifier = this.compositionTransaction.enlist();\n    return Promise.all([\n      this.ac.get('/api/tweets'),\n      this.ac.get('/api/users'),\n      this.ac.get('/api/users/me')\n    ]).then(res => {\n      this.tweets = res[0].content;\n      this.users = res[1].content;\n      this.ownUser = res[2].content;\n\n      this.ea.publish(new TweetUpdate());\n      this.ea.publish(new UserUpdate());\n      this.compositionTransactionNotifier.done();\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  saveTweet(tweetText, tweetImage) {\n    let formData = new FormData();\n    formData.append('tweetText', tweetText);\n    if (typeof tweetImage !== 'undefined') {\n      formData.append('tweetImage', tweetImage);\n    }\n\n    this.ac.post('/api/tweets', formData).then(res => {\n      /*this.tweets.unshift(res.content);\n      this.ea.publish(new TweetUpdate());*/\n      this.getTweets();\n    });\n  }\n\n  deleteTweet(tweet) {\n    console.log('twitterService: deleteTweet');\n    this.ac.delete('/api/tweets/' + tweet._id).then(res => {\n      /*const index = this.tweets.indexOf(tweet);\n      if (index > -1) {\n        this.tweets.splice(index, 1);\n      }\n      this.ea.publish(new TweetUpdate());*/\n      this.getTweets();\n    });\n  }\n\n  deleteAllTweetsForUser(user) {\n    console.log('twitterService: deleteAllTweetsForUser');\n    this.ac.delete('/api/users/' + user._id + '/tweets').then(res => {\n      this.getTweets();\n    });\n  }\n\n  follow(user, bool) {\n    if (bool) {\n      // unfollow\n      this.ac.delete('/api/users/follow/' + user._id).then(res => {\n        /*for (let i = 0; i < this.users.length; i++) {\n          if (this.users[i]._id === res.content._id) {\n            this.users[i] = res.content;\n          }\n        }*/\n        this.getUsers();\n      });\n    } else {\n      // follow\n      this.ac.post('/api/users/follow/' + user._id).then(res => {\n        /*for (let i = 0; i < this.users.length; i++) {\n          if (this.users[i]._id === res.content._id) {\n            this.users[i] = res.content;\n          }\n        }*/\n        this.getUsers();\n      });\n    }\n  }\n\n  deleteUser(user) {\n    this.ac.delete('/api/users/' + user._id).then(res => {\n      /*const index = this.tweets.indexOf(tweet);au run --w\n      if (index > -1) {\n        this.tweets.splice(index, 1);\n      }\n      this.ea.publish(new TweetUpdate());*/\n      this.getUsers();\n      this.getTweets();\n    });\n  }\n\n  deleteTweetsForUser(user) {\n    this.ac.delete('/api/users/' + user._id + '/tweets').then(res => {\n      this.getTweets();\n    });\n  }\n\n  updateProfil(username, name, email, password) {\n    let user = {\n      username: username,\n      name: name,\n      email: email,\n      password: password\n    };\n    this.ac.post('/api/users/me', user).then(res => {\n      this.getUsers();\n      this.getMe();\n    });\n  }\n\n  // TODO upload Picture und git commit dazu\n  uploadProfilImage(profilIimage) {\n    if (profilIimage !== null || profilIimage !== undefined) {\n      let formData = new FormData();\n      formData.append('info', 'This is a profilImage.');\n      formData.append('profilImage', profilIimage);\n\n      this.ac.post('/api/users/image', formData).then(res => {\n        this.getMe();\n      });\n    }\n  }\n\n  isAuthenticated() {\n    return this.ac.isAuthenticated();\n  }\n\n  getUsers() {\n    return this.ac.get('/api/users').then(res => {\n      this.users = res.content;\n      console.log('getUsers');\n      console.log(this.users);\n      this.ea.publish(new UserUpdate());\n    });\n  }\n\n  getMe() {\n    return this.ac.get('/api/users/me').then(res => {\n      this.ownUser = res.content;\n      console.log('getMe');\n      console.log(this.ownUser);\n      this.ea.publish(new UserUpdate());\n    });\n  }\n\n  getTweets() {\n    return this.ac.get('/api/tweets').then(res => {\n      this.tweets = res.content;\n      console.log('getTweets');\n      console.log(this.tweets);\n      this.ea.publish(new TweetUpdate());\n    });\n  }\n\n  register(username, name, email, password) {\n    const newUser = {\n      username: username,\n      name: name,\n      email: email,\n      password: password\n    };\n    return this.ac.post('/api/users', newUser);\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    return this.ac.authenticate('/api/users/authenticate', user);\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: ''\n    };\n    this.ac.clearAuthentication();\n    this.ea.publish(new LoginStatus(status));\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService)\nexport class AdminSettings {\n\n  adminView = true;\n  username = '';\n  name = '';\n  email = '';\n  password = '';\n  error = false;\n  errorText = null;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  addUser() {\n    return Promise.all([\n      this.twitterService.register(this.username, this.name, this.email, this.password)\n    ]).then(res => {\n      this.twitterService.getUsers();\n      this.errorText = null;\n    }).catch(error => {\n      this.errorText = error.response;\n      //console.error(error);\n    });\n  }\n\n  deleteUser(user) {\n    this.twitterService.deleteUser(user);\n  }\n\n  deleteTweetsForUser(user) {\n    this.twitterService.deleteTweetsForUser(user);\n  }\n\n}\n\n","export class Dashboard {\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class FollowerTimeline {\n\n  users = [];\n  tweets = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUsers();\n    this.ea.subscribe(UserUpdate, msg => {\n      //console.log('followerTimeline subscribed');\n      this.updateUsers();\n    });\n  }\n\n  updateUsers() {\n    this.users = [];\n    this.users.push(this.twitterService.ownUser);\n    for (let user of this.twitterService.users) {\n      for (let follower of user.followers) {\n        if (follower._id === this.twitterService.ownUser._id) {\n          this.users.push(user);\n        }\n      }\n    }\n  }\n\n  /*attached() {\n    console.log('followerTimeline attached');\n    console.log(this.tweets);\n  }*/\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class GlobalTimeline {\n\n  users = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUsers();\n    this.ea.subscribe(UserUpdate, msg => {\n      //console.log('globalTimeline subscribed');\n      this.updateUsers();\n    });\n  }\n\n  updateUsers() {\n    this.users = this.twitterService.users;\n  }\n\n  /*attached() {\n    this.tweets = this.twitterService.tweets;\n    console.log('globalTimeline attached');\n  }*/\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n//import {LoginStatus} from '../../services/messages';\n\n@inject(EventAggregator, TwitterService)\nexport class Login {\n\n  email = '';\n  password = '';\n  rememberMe = false;\n\n  constructor(ea, ts) {\n    this.twitterService = ts;\n    if (localStorage.emailTwitter !== 'null' && typeof localStorage.emailTwitter !== 'undefined') {\n      let loginOptions = JSON.parse(localStorage.emailTwitter);\n      this.email = loginOptions.email;\n      this.rememberMe = loginOptions.rememberMe;\n    }\n  }\n\n  login() {\n    // localStorage: save email and rememberMe\n    if (this.rememberMe === true) {\n      let loginOptions = {\n        email: this.email,\n        rememberMe: this.rememberMe\n      };\n      localStorage.emailTwitter = JSON.stringify(loginOptions);\n    }\n    if (this.rememberMe === false) {\n      localStorage.emailTwitter = null;\n    }\n    console.log(`Trying to log in ${this.email}`);\n    this.twitterService.login(this.email.trim(), this.password.trim());\n  }\n}\n","import TwitterService from '../../services/twitter-service';\nimport {inject} from 'aurelia-framework';\n\n@inject(TwitterService)\nexport class Logout {\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  logout() {\n    console.log('logging out');\n    this.twitterService.logout();\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Profil {\n\n  ownUser = null;\n  profilImage = null;\n  username = '';\n  name = '';\n  email = '';\n  password = '';\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUser();\n    this.ea.subscribe(UserUpdate, msg => {\n      this.updateUser();\n    });\n  }\n\n  updateUser() {\n    this.ownUser = this.twitterService.ownUser;\n    this.username = this.ownUser.username;\n    this.name = this.ownUser.name;\n    this.email = this.ownUser.email;\n    this.password = this.ownUser.password;\n  }\n\n  update() {\n    this.twitterService.updateProfil(this.username, this.name, this.email, this.password);\n  }\n\n  deleteAllTweets() {\n    this.twitterService.deleteAllTweetsForUser(this.ownUser);\n  }\n\n  uploadProfilImage() {\n    this.twitterService.uploadProfilImage(this.profilImage[0]);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\n\n@inject(TwitterService)\nexport class Signup {\n\n  username = '';\n  name = '';\n  email = '';\n  password = '';\n  error = false;\n  errorText = null;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  register(e) {\n    return Promise.all([\n      this.twitterService.register(this.username, this.name, this.email, this.password)\n    ]).then(res => {\n      this.errorText = null;\n      this.twitterService.login(this.email, this.password);\n    }).catch(error => {\n      this.errorText = error.response;\n      //console.error(error);\n    });\n  }\n}\n","export class StartScreen {\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TweetUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Timeline {\n  users = [];\n  tweets = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.ea.subscribe(TweetUpdate, msg => {\n      //console.log('timeline subscribed');\n      this.updateTweets();\n    });\n  }\n\n  deleteTweet(tweet) {\n    console.log('timeline: delete Tweet');\n    this.twitterService.deleteTweet(tweet);\n  }\n\n  allowDelete(tweet) {\n    if (this.twitterService.ownUser !== null && this.twitterService.ownUser !== undefined) {\n      if (tweet.tweeter._id === this.twitterService.ownUser._id || this.twitterService.ownUser.role === 'admin') {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n  }\n\n  activate(data) {\n    this.users = data;\n    //console.log('timeline activate');\n    this.updateTweets();\n  }\n\n  updateTweets() {\n    this.tweets = [];\n    for (let tweet of this.twitterService.tweets) {\n      for (let user of this.users) {\n        if (tweet.tweeter !== null && tweet.tweeter._id === user._id) {\n          this.tweets.push(tweet);\n        }\n      }\n    }\n  }\n}\n","export class BlobToUrlValueConverter {\n  toView(blob) {\n    return URL.createObjectURL(blob);\n  }\n}\n","export class FileListToArrayValueConverter {\n  toView(fileList) {\n    let files = [];\n    if (!fileList) {\n      return files;\n    }\n    for (let i = 0; i < fileList.length; i++) {\n      files.push(fileList.item(i));\n    }\n    return files;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\n\n@inject(TwitterService)\nexport class Tweet {\n\n  tweetText = '';\n  imageList = [];\n  selectedFiles = null;\n  error = false;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  createTweet() {\n    if (this.tweetText === '' && this.imageList.length === 0) {\n      this.error = true;\n    } else {\n      this.twitterService.saveTweet(this.tweetText, this.imageList[0]);\n      this.tweetText = '';\n      this.selectedFiles = null;\n      this.imageList = [];\n    }\n  }\n\n  addPicturesToArray() {\n    for (let i = 0; i < this.selectedFiles.length; i++) {\n      this.imageList.push(this.selectedFiles.item(i));\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Usercard {\n  userId = undefined;\n  user = null;\n  alreadyFollowing = undefined;\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.ea.subscribe(UserUpdate, msg => {\n      console.log('usercard subscribed: UserUpdate');\n      this.updateUsers();\n    });\n  }\n\n  activate(data) {\n    this.userId = data;\n    this.updateUsers();\n  }\n\n  updateUsers() {\n    for (let user of this.twitterService.users) {\n      if (user._id === this.userId) {\n        this.user = user;\n      }\n    }\n    for (let follower of this.user.followers) {\n      if (follower._id === this.twitterService.ownUser._id) {\n        this.alreadyFollowing = true;\n      }\n    }\n  }\n\n  follow() {\n    this.twitterService.follow(this.user, this.alreadyFollowing);\n    this.alreadyFollowing = !this.alreadyFollowing;\n  }\n\n  hasProfilImage() {\n    if (this.user.profilImage !== undefined) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Users {\n\n  otherUsers = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUsers();\n    this.ea.subscribe(UserUpdate, msg => {\n      console.log('users subscribed');\n      this.updateUsers();\n    });\n  }\n\n  updateUsers() {\n    this.otherUsers = [];\n    for (let user of this.twitterService.users) {\n      if (user._id !== this.twitterService.ownUser._id) {\n        this.otherUsers.push(user);\n      }\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class UserTimeline {\n\n  userId = null;\n  user = null;\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.ea.subscribe(UserUpdate, msg => {\n      console.log('userTimeline subscribed: UserUpdate');\n      this.updateUsers();\n    });\n  }\n\n  activate(params) {\n    this.userId = params.id;\n    this.updateUsers();\n  }\n\n  updateUsers() {\n    for (let user of this.twitterService.users) {\n      if (user._id === this.userId) {\n        this.user = user;\n      }\n    }\n  }\n}\n"],"sourceRoot":".."}