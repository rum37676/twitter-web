{"version":3,"sources":["src/app.js","src/environment.js","src/home.js","src/main.js","src/nav-bar.js","src/resources/index.js","src/services/async-http-client.js","src/services/fixtures.js","src/services/messages.js","src/services/twitter-service.js","src/viewmodels/adminSettings/adminSettings.js","src/viewmodels/dashboard/dashboard.js","src/viewmodels/followerTimeline/followerTimeline.js","src/viewmodels/globalTimeline/globalTimeline.js","src/viewmodels/login/login.js","src/viewmodels/logout/logout.js","src/viewmodels/profil/profil.js","src/viewmodels/signup/signup.js","src/viewmodels/startScreen/startScreen.js","src/viewmodels/timeline/timeline.js","src/viewmodels/tweet/blob-to-url.js","src/viewmodels/tweet/file-list-to-array.js","src/viewmodels/tweet/tweet.js","src/viewmodels/usercard/usercard.js","src/viewmodels/users/users.js","src/viewmodels/userTimeline/userTimeline.js"],"names":["App","ts","au","ea","twitterService","subscribe","router","navigate","replace","trigger","reset","msg","status","success","setRoot","configureRouter","config","map","route","name","moduleId","nav","title","attached","isAuthenticated","getMe","then","navigateToRoute","debug","testing","Home","aurelia","role","mapUnknownRoutes","updateData","configure","use","standardConfiguration","feature","developmentLogging","plugin","start","NavBar","showNav","navItem","ownUser","console","log","toLowerCase","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrlOnline","authenticated","localStorage","sessionTokenTwitter","auth","JSON","parse","withHeader","token","authenticate","url","user","post","response","content","stringify","configuration","email","publish","catch","message","clearAuthentication","get","obj","delete","Fixtures","baseUrlLocal","users","username","password","tweets","text","tweeter","TotalUpdate","total","LoginStatus","TweetUpdate","UserUpdate","OwnUserUpdate","TwitterService","FormData","data","ac","cT","compositionTransaction","compositionTransactionNotifier","enlist","Promise","all","res","done","error","saveTweet","tweetText","tweetImage","formData","append","getTweets","deleteTweet","tweet","_id","deleteAllTweetsForUser","follow","bool","getUsers","deleteUser","deleteTweetsForUser","updateProfil","register","newUser","login","logout","AdminSettings","adminView","errorText","addUser","Dashboard","FollowerTimeline","updateUsers","push","followers","follower","GlobalTimeline","Login","rememberMe","emailTwitter","loginOptions","trim","Logout","Profil","updateUser","update","deleteAllTweets","Signup","e","StartScreen","Timeline","updateTweets","allowDelete","undefined","activate","BlobToUrlValueConverter","toView","blob","URL","createObjectURL","FileListToArrayValueConverter","fileList","files","i","length","item","Tweet","imageList","selectedFiles","createTweet","addPicturesToArray","Usercard","userId","alreadyFollowing","hasProfilImage","profilImage","Users","otherUsers","UserTimeline","params","id"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\nimport TwitterService from './services/twitter-service';\n\n@inject(TwitterService, Aurelia, EventAggregator)\nexport class App {\n\n  constructor(ts, au, ea) {\n    this.au = au;\n    this.twitterService = ts;\n    ea.subscribe(LoginStatus, msg => {\n      this.router.navigate('/', { replace: true, trigger: false });\n      this.router.reset();\n      if (msg.status.success === true) {\n        au.setRoot('home');\n      } else {\n        au.setRoot('app');\n      }\n    });\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'login'], name: 'login', moduleId: 'viewmodels/login/login', nav: true, title: 'Login' },\n      { route: 'signup', name: 'signup', moduleId: 'viewmodels/signup/signup', nav: true, title: 'Signup' }\n    ]);\n    this.router = router;\n  }\n\n  attached() {\n    if (this.twitterService.isAuthenticated()) {\n      this.twitterService.getMe();\n      this.au.setRoot('home').then(() => {\n        this.router.navigateToRoute('startScreen');\n      });\n    }\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { inject, Aurelia } from 'aurelia-framework';\nimport TwitterService from 'services/twitter-service';\n\n@inject(Aurelia, TwitterService)\nexport class Home {\n\n  constructor(au, ts) {\n    this.aurelia = au;\n    this.twitterService = ts;\n  }\n\n  configureRouter(config, router) {\n\n    config.map([\n      { route: 'startScreen', name: 'startScreen', moduleId: 'viewmodels/startScreen/startScreen', nav: true, title: 'Start Screen' },\n      { route: 'followerTimeline', name: 'followerTimeline', moduleId: 'viewmodels/followerTimeline/followerTimeline', nav: true, title: 'Follower Timeline' },\n      { route: ['', 'home'], name: 'globalTimeline', moduleId: 'viewmodels/globalTimeline/globalTimeline', nav: true, title: 'Global Timeline' },\n      { route: 'users', name: 'users', moduleId: 'viewmodels/users/users', nav: true, title: 'Users' },\n      //{ route: 'dashboard', name: 'dashboard', moduleId: 'viewmodels/dashboard/dashboard', nav: true, title: 'Dashboard' },\n      { route: 'profil', name: 'profil', moduleId: 'viewmodels/profil/profil', nav: true, title: 'Profil' },\n      { route: 'adminSettings', name: 'adminSettings', moduleId: 'viewmodels/adminSettings/adminSettings', nav: true, title: 'Admin Settings', role: 'admin' },\n      { route: 'userTimeline/:id', name: 'userTimeline', moduleId: 'viewmodels/userTimeline/userTimeline', nav: false, title: 'userTimeline' },\n      { route: 'logout', name: 'logout', moduleId: 'viewmodels/logout/logout', nav: true, title: 'Logout' }\n    ]);\n    this.router = router;\n\n    config.mapUnknownRoutes(instruction => {\n      return 'home';\n    });\n  }\n\n  attached() {\n    if (this.twitterService.isAuthenticated()) {\n      this.twitterService.updateData();\n    }\n  }\n}\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject, bindable} from 'aurelia-framework';\nimport TwitterService from './services/twitter-service';\n\n@inject(TwitterService)\nexport class NavBar {\n\n  @bindable router;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  showNav(navItem) {\n    if (!navItem.config.role) {\n      return true;\n    }\n    if (this.twitterService.ownUser !== null) {\n      console.log('role: ' + this.twitterService.ownUser.role);\n      if (typeof this.twitterService.ownUser.role !== \"undefined\") {\n        return navItem.config.role === this.twitterService.ownUser.role.toLowerCase();\n      }\n    }\n    else {\n      // ownUser not updated yet\n      return false;\n    }\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus, OwnUserUpdate} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator )\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea) {\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrlOnline);\n    });\n    this.ea = ea;\n  }\n\n  isAuthenticated() {\n    let authenticated = false;\n    if (localStorage.sessionTokenTwitter !== 'null' && typeof localStorage.sessionTokenTwitter !== 'undefined') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(localStorage.sessionTokenTwitter);\n        http.withHeader('Authorization', 'bearer ' + auth.token);\n      });\n    }\n    return authenticated;\n  }\n\n  authenticate(url, user) {\n    //console.log('authentication');\n    this.http.post(url, user).then(response => {\n      const status = response.content;\n      if (status.success) {\n        localStorage.sessionTokenTwitter = JSON.stringify(response.content);\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n      }\n      console.log('authentication successful: logged in user: ' + user.email);\n      this.ea.publish(new OwnUserUpdate(status.user));\n      this.ea.publish(new LoginStatus(status));\n    }).catch(error => {\n      const status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.ea.publish(new LoginStatus(status));\n    });\n  }\n\n  clearAuthentication() {\n    localStorage.sessionTokenTwitter = null;\n    this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n\n  get(url) {\n    return this.http.get(url);\n  }\n\n  post(url, obj) {\n    return this.http.post(url, obj);\n  }\n\n  delete(url) {\n    console.log('http-client delete');\n    return this.http.delete(url);\n  }\n}\n","export default class Fixtures {\n\n  baseUrlLocal = 'http://localhost:4000';\n  baseUrlOnline = 'https://safe-brushlands-98673.herokuapp.com';\n  users = [\n    {\n      username: 'user1',\n      name: 'user eins',\n      email: 'user1@1.com',\n      password: 'secret1'\n    },\n    {\n      username: 'user2',\n      name: 'user zwei',\n      email: 'user2@2.com',\n      password: 'secret2'\n    }\n  ];\n\n  tweets = [\n    {\n      text: 'Test tweet 1',\n      tweeter: this.users[0]\n    },\n    {\n      text: 'Test tweet 2',\n      tweeter: this.users[1]\n    }\n  ];\n}\n","export class TotalUpdate {\n  constructor(total) {\n    this.total = total;\n  }\n}\n\nexport class LoginStatus {\n  constructor(status) {\n    this.status = status;\n  }\n}\n\nexport class TweetUpdate {\n}\n\nexport class UserUpdate {\n}\n\nexport class OwnUserUpdate {\n  constructor(user) {\n    this.user = user;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport Fixtures from './fixtures';\nimport {LoginStatus, OwnUserUpdate, TweetUpdate, UserUpdate} from './messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\nimport { CompositionTransaction } from 'aurelia-framework';\n\n@inject(Fixtures, EventAggregator, AsyncHttpClient, CompositionTransaction, FormData)\nexport default class TwitterService {\n\n  ownUser = null;\n  users = [];\n  tweets = [];\n\n\n  constructor(data, ea, ac, cT) {\n    this.ea = ea;\n    this.ac = ac;\n    this.compositionTransaction = cT;\n    this.compositionTransactionNotifier = null;\n\n    this.ea.subscribe(OwnUserUpdate, msg => {\n      this.ownUser = msg.user;\n    });\n    this.ea.subscribe(LoginStatus, msg => {\n      if (msg.status.success === true) {\n        console.log('twitterService subscribe');\n        this.updateData();\n      }\n    });\n  }\n\n  updateData() {\n    this.compositionTransactionNotifier = this.compositionTransaction.enlist();\n    return Promise.all([\n      this.ac.get('/api/tweets'),\n      this.ac.get('/api/users'),\n      this.ac.get('/api/users/me')\n    ]).then(res => {\n      this.tweets = res[0].content;\n      this.users = res[1].content;\n      this.ownUser = res[2].content;\n\n      this.ea.publish(new TweetUpdate());\n      this.ea.publish(new UserUpdate());\n      this.compositionTransactionNotifier.done();\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  saveTweet(tweetText, tweetImage) {\n    let formData = new FormData();\n    formData.append('tweetText', tweetText);\n    if (typeof tweetImage !== 'undefined') {\n      formData.append('tweetImage', tweetImage);\n    }\n\n    this.ac.post('/api/tweets', formData).then(res => {\n      /*this.tweets.unshift(res.content);\n      this.ea.publish(new TweetUpdate());*/\n      this.getTweets();\n    });\n  }\n\n  deleteTweet(tweet) {\n    console.log('twitterService: deleteTweet');\n    this.ac.delete('/api/tweets/' + tweet._id).then(res => {\n      /*const index = this.tweets.indexOf(tweet);\n      if (index > -1) {\n        this.tweets.splice(index, 1);\n      }\n      this.ea.publish(new TweetUpdate());*/\n      this.getTweets();\n    });\n  }\n\n  deleteAllTweetsForUser(user) {\n    console.log('twitterService: deleteAllTweetsForUser');\n    this.ac.delete('/api/users/' + user._id + '/tweets').then(res => {\n      this.getTweets();\n    });\n  }\n\n  follow(user, bool) {\n    if (bool) {\n      // unfollow\n      this.ac.delete('/api/users/follow/' + user._id).then(res => {\n        /*for (let i = 0; i < this.users.length; i++) {\n          if (this.users[i]._id === res.content._id) {\n            this.users[i] = res.content;\n          }\n        }*/\n        this.getUsers();\n      });\n    }\n    else {\n      // follow\n      this.ac.post('/api/users/follow/' + user._id).then(res => {\n        /*for (let i = 0; i < this.users.length; i++) {\n          if (this.users[i]._id === res.content._id) {\n            this.users[i] = res.content;\n          }\n        }*/\n        this.getUsers();\n      });\n    }\n  }\n\n  deleteUser(user) {\n    this.ac.delete('/api/users/' + user._id).then(res => {\n      /*const index = this.tweets.indexOf(tweet);au run --w\n      if (index > -1) {\n        this.tweets.splice(index, 1);\n      }\n      this.ea.publish(new TweetUpdate());*/\n      this.getUsers();\n      this.getTweets();\n    });\n  }\n\n  deleteTweetsForUser(user) {\n    this.ac.delete('/api/users/' + user._id + '/tweets').then(res => {\n      this.getTweets();\n    });\n  }\n\n  updateProfil(username, name, email, password) {\n    let user = {\n      username: username,\n      name: name,\n      email: email,\n      password: password\n    };\n    this.ac.post('/api/users/me', user).then(res => {\n      this.getUsers();\n      this.getMe();\n      this.getTweets();\n    });\n  }\n\n  isAuthenticated() {\n    return this.ac.isAuthenticated();\n  }\n\n  getUsers() {\n    this.ac.get('/api/users').then(res => {\n      this.users = res.content;\n      console.log('getUsers');\n      console.log(this.users);\n      this.ea.publish(new UserUpdate());\n    });\n  }\n\n  getMe() {\n    this.ac.get('/api/users/me').then(res => {\n      this.ownUser = res.content;\n      console.log('getMe');\n      console.log(this.ownUser);\n      this.ea.publish(new UserUpdate());\n    });\n  }\n\n  getTweets() {\n    this.ac.get('/api/tweets').then(res => {\n      this.tweets = res.content;\n      console.log('getTweets');\n      console.log(this.tweets);\n      this.ea.publish(new TweetUpdate());\n    });\n  }\n\n  register(username, name, email, password) {\n    const newUser = {\n      username: username,\n      name: name,\n      email: email,\n      password: password\n    };\n    return this.ac.post('/api/users', newUser);\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    return this.ac.authenticate('/api/users/authenticate', user);\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: ''\n    };\n    this.ac.clearAuthentication();\n    this.ea.publish(new LoginStatus(status));\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService)\nexport class AdminSettings {\n\n  adminView = true;\n  username = '';\n  name = '';\n  email = '';\n  password = '';\n  error = false;\n  errorText = null;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  addUser() {\n    return Promise.all([\n      this.twitterService.register(this.username, this.name, this.email, this.password)\n    ]).then(res => {\n      this.twitterService.getUsers();\n      this.errorText = null;\n    }).catch(error => {\n      this.errorText = error.response;\n      //console.error(error);\n    });\n  }\n\n  deleteUser(user) {\n    this.twitterService.deleteUser(user);\n  }\n\n  deleteTweetsForUser(user) {\n    this.twitterService.deleteTweetsForUser(user);\n  }\n\n}\n\n","export class Dashboard {\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class FollowerTimeline {\n\n  users = [];\n  tweets = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUsers();\n    this.ea.subscribe(UserUpdate, msg => {\n      //console.log('followerTimeline subscribed');\n      this.updateUsers();\n    });\n  }\n\n  updateUsers() {\n    this.users = [];\n    this.users.push(this.twitterService.ownUser);\n    for (let user of this.twitterService.users) {\n      for (let follower of user.followers) {\n        if (follower._id === this.twitterService.ownUser._id) {\n          this.users.push(user);\n        }\n      }\n    }\n  }\n\n  /*attached() {\n    console.log('followerTimeline attached');\n    console.log(this.tweets);\n  }*/\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class GlobalTimeline {\n\n  users = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUsers();\n    this.ea.subscribe(UserUpdate, msg => {\n      //console.log('globalTimeline subscribed');\n      this.updateUsers();\n    });\n  }\n\n  updateUsers() {\n    this.users = this.twitterService.users;\n  }\n\n  /*attached() {\n    this.tweets = this.twitterService.tweets;\n    console.log('globalTimeline attached');\n  }*/\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n//import {LoginStatus} from '../../services/messages';\n\n@inject(EventAggregator, TwitterService)\nexport class Login {\n\n  email = '';\n  password = '';\n  rememberMe = false;\n\n  constructor(ea, ts) {\n    this.twitterService = ts;\n    if (localStorage.emailTwitter !== 'null' && typeof localStorage.emailTwitter !== 'undefined') {\n      let loginOptions = JSON.parse(localStorage.emailTwitter);\n      this.email = loginOptions.email;\n      this.rememberMe = loginOptions.rememberMe;\n    }\n  }\n\n  login() {\n    // localStorage: save email and rememberMe\n    if (this.rememberMe === true) {\n      let loginOptions = {\n        email: this.email,\n        rememberMe: this.rememberMe\n      };\n      localStorage.emailTwitter = JSON.stringify(loginOptions);\n    }\n    if (this.rememberMe === false) {\n      localStorage.emailTwitter = null;\n    }\n    console.log(`Trying to log in ${this.email}`);\n    this.twitterService.login(this.email.trim(), this.password.trim());\n  }\n}\n","import TwitterService from '../../services/twitter-service';\nimport {inject} from 'aurelia-framework';\n\n@inject(TwitterService)\nexport class Logout {\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  logout() {\n    console.log('logging out');\n    this.twitterService.logout();\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Profil {\n\n  ownUser = null;\n  username = '';\n  name = '';\n  email = '';\n  password = '';\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUser();\n    this.ea.subscribe(UserUpdate, msg => {\n      this.updateUser();\n    });\n  }\n\n  updateUser() {\n    this.ownUser = this.twitterService.ownUser;\n    this.username = this.ownUser.username;\n    this.name = this.ownUser.name;\n    this.email = this.ownUser.email;\n    this.password = this.ownUser.password;\n  }\n\n  update() {\n    this.twitterService.updateProfil(this.username, this.name, this.email, this.password);\n  }\n\n  deleteAllTweets() {\n    this.twitterService.deleteAllTweetsForUser(this.ownUser);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\n\n@inject(TwitterService)\nexport class Signup {\n\n  username = '';\n  name = '';\n  email = '';\n  password = '';\n  error = false;\n  errorText = null;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  register(e) {\n    return Promise.all([\n      this.twitterService.register(this.username, this.name, this.email, this.password)\n    ]).then(res => {\n      this.errorText = null;\n      this.twitterService.login(this.email, this.password);\n    }).catch(error => {\n      this.errorText = error.response;\n      //console.error(error);\n    });\n  }\n}\n","export class StartScreen {\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TweetUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Timeline {\n  users = [];\n  tweets = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.ea.subscribe(TweetUpdate, msg => {\n      //console.log('timeline subscribed');\n      this.updateTweets();\n    });\n  }\n\n  deleteTweet(tweet) {\n    console.log('timeline: delete Tweet');\n    this.twitterService.deleteTweet(tweet);\n  }\n\n  allowDelete(tweet) {\n    if (this.twitterService.ownUser !== null && this.twitterService.ownUser !== undefined) {\n      if (tweet.tweeter._id === this.twitterService.ownUser._id || this.twitterService.ownUser.role === 'admin') {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n  }\n\n  activate(data) {\n    this.users = data;\n    //console.log('timeline activate');\n    this.updateTweets();\n  }\n\n  updateTweets() {\n    this.tweets = [];\n    for (let tweet of this.twitterService.tweets) {\n      for (let user of this.users) {\n        if (tweet.tweeter !== null && tweet.tweeter._id === user._id) {\n          this.tweets.push(tweet);\n        }\n      }\n    }\n  }\n}\n","export class BlobToUrlValueConverter {\n  toView(blob) {\n    return URL.createObjectURL(blob);\n  }\n}\n","export class FileListToArrayValueConverter {\n  toView(fileList) {\n    let files = [];\n    if (!fileList) {\n      return files;\n    }\n    for (let i = 0; i < fileList.length; i++) {\n      files.push(fileList.item(i));\n    }\n    return files;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\n\n@inject(TwitterService)\nexport class Tweet {\n\n  tweetText = '';\n  imageList = [];\n  selectedFiles = null;\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  createTweet() {\n    this.twitterService.saveTweet(this.tweetText, this.imageList[0]);\n    this.tweetText = '';\n    this.selectedFiles = null;\n    this.imageList = [];\n  }\n\n  addPicturesToArray() {\n    for (let i = 0; i < this.selectedFiles.length; i++) {\n      this.imageList.push(this.selectedFiles.item(i));\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Usercard {\n  userId = undefined;\n  user = null;\n  alreadyFollowing = undefined;\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.ea.subscribe(UserUpdate, msg => {\n      console.log('usercard subscribed: UserUpdate');\n      this.updateUsers();\n    });\n  }\n\n  activate(data) {\n    this.userId = data;\n    this.updateUsers();\n  }\n\n  updateUsers() {\n    for (let user of this.twitterService.users) {\n      if (user._id === this.userId) {\n        this.user = user;\n      }\n    }\n    for (let follower of this.user.followers) {\n      if (follower._id === this.twitterService.ownUser._id) {\n        this.alreadyFollowing = true;\n      }\n    }\n  }\n\n  follow() {\n    this.twitterService.follow(this.user, this.alreadyFollowing);\n    this.alreadyFollowing = !this.alreadyFollowing;\n  }\n\n  hasProfilImage() {\n    if (this.user.profilImage !== undefined) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class Users {\n\n  otherUsers = [];\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.updateUsers();\n    this.ea.subscribe(UserUpdate, msg => {\n      console.log('users subscribed');\n      this.updateUsers();\n    });\n  }\n\n  updateUsers() {\n    this.otherUsers = [];\n    for (let user of this.twitterService.users) {\n      if (user._id !== this.twitterService.ownUser._id) {\n        this.otherUsers.push(user);\n      }\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class UserTimeline {\n\n  userId = null;\n  user = null;\n\n  constructor(ts, ea) {\n    this.twitterService = ts;\n    this.ea = ea;\n    this.ea.subscribe(UserUpdate, msg => {\n      console.log('userTimeline subscribed: UserUpdate');\n      this.updateUsers();\n    });\n  }\n\n  activate(params) {\n    this.userId = params.id;\n    this.updateUsers();\n  }\n\n  updateUsers() {\n    for (let user of this.twitterService.users) {\n      if (user._id === this.userId) {\n        this.user = user;\n      }\n    }\n  }\n}\n"],"sourceRoot":".."}